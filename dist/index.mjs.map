{"version":3,"sources":["../src/store.ts","../src/utils/clone.ts"],"sourcesContent":["// @ts-ignore\nimport { create } from \"zustand\";\nimport { combine, persist } from \"zustand/middleware\";\nimport { deepClone } from \"./utils/clone\";\n\nexport type Updater<T> = (updater: (value: T) => void) => void;\n\ntype SecondParam<T> = T extends (\n  _f: infer _F,\n  _s: infer S,\n  ...args: infer _U\n) => any\n  ? S\n  : never;\n\ntype MakeUpdater<T> = {\n  lastUpdateTime: number;\n\n  markUpdate: () => void;\n  update: Updater<T>;\n};\n\n// type SetStoreState<T> = (\n//   partial: T | Partial<T> | ((state: T) => T | Partial<T>),\n//   replace?: boolean | undefined\n// ) => void;\n\nexport type SetStoreState<T> = {\n  (\n    partial: T | Partial<T> | ((state: T) => T | Partial<T>),\n    replace?: boolean\n  ): void; // Change here to allow `boolean` for replace\n  (state: T | ((state: T) => T), replace: true): void;\n};\n\nexport function createPersistStore<T extends object, M>(\n  state: T,\n  methods: (\n    set: SetStoreState<T & MakeUpdater<T>>,\n    get: () => T & MakeUpdater<T>\n  ) => M,\n  persistOptions: SecondParam<typeof persist<T & M & MakeUpdater<T>>>\n) {\n  return create(\n    persist(\n      combine(\n        {\n          ...state,\n          lastUpdateTime: 0,\n        },\n        (set, get) => {\n          return {\n            ...methods(set as any, get as any),\n\n            markUpdate() {\n              set({ lastUpdateTime: Date.now() } as Partial<\n                T & M & MakeUpdater<T>\n              >);\n            },\n            update(updater) {\n              const state = deepClone(get());\n              updater(state);\n              set({\n                ...state,\n                lastUpdateTime: Date.now(),\n              });\n            },\n          } as M & MakeUpdater<T>;\n        }\n      ),\n      persistOptions as any\n    )\n  );\n}\n\nexport function createStore<T extends object, M>(\n  state: T,\n  methods: (\n    set: SetStoreState<T & MakeUpdater<T>>,\n    get: () => T & MakeUpdater<T>\n  ) => M\n) {\n  return create(\n    combine(\n      {\n        ...state,\n        lastUpdateTime: 0,\n      },\n      (set, get) => {\n        return {\n          ...methods(set as any, get as any),\n\n          markUpdate() {\n            set({ lastUpdateTime: Date.now() } as Partial<\n              T & M & MakeUpdater<T>\n            >);\n          },\n          update(updater) {\n            const state = deepClone(get());\n            updater(state);\n            set({\n              ...state,\n              lastUpdateTime: Date.now(),\n            });\n          },\n        } as M & MakeUpdater<T>;\n      }\n    )\n  );\n}\n","export function deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function ensure<T extends object>(\n  obj: T,\n  keys: Array<keyof T>\n): boolean {\n  return keys.every(\n    (k) => obj[k] !== undefined && obj[k] !== null && obj[k] !== \"\"\n  );\n}\n"],"mappings":"AACA,OAAS,UAAAA,MAAc,UACvB,OAAS,WAAAC,EAAS,WAAAC,MAAe,qBCF1B,SAASC,EAAaC,EAAW,CACtC,OAAO,KAAK,MAAM,KAAK,UAAUA,CAAG,CAAC,CACvC,CAEO,SAASC,EACdD,EACAE,EACS,CACT,OAAOA,EAAK,MACTC,GAAMH,EAAIG,CAAC,IAAM,QAAaH,EAAIG,CAAC,IAAM,MAAQH,EAAIG,CAAC,IAAM,EAC/D,CACF,CDwBO,SAASC,EACdC,EACAC,EAIAC,EACA,CACA,OAAOC,EACLC,EACEC,EACE,CACE,GAAGL,EACH,eAAgB,CAClB,EACA,CAACM,EAAKC,KACG,CACL,GAAGN,EAAQK,EAAYC,CAAU,EAEjC,YAAa,CACXD,EAAI,CAAE,eAAgB,KAAK,IAAI,CAAE,CAEhC,CACH,EACA,OAAOE,EAAS,CACd,IAAMR,EAAQS,EAAUF,EAAI,CAAC,EAC7BC,EAAQR,CAAK,EACbM,EAAI,CACF,GAAGN,EACH,eAAgB,KAAK,IAAI,CAC3B,CAAC,CACH,CACF,EAEJ,EACAE,CACF,CACF,CACF,CAEO,SAASQ,EACdV,EACAC,EAIA,CACA,OAAOE,EACLE,EACE,CACE,GAAGL,EACH,eAAgB,CAClB,EACA,CAACM,EAAKC,KACG,CACL,GAAGN,EAAQK,EAAYC,CAAU,EAEjC,YAAa,CACXD,EAAI,CAAE,eAAgB,KAAK,IAAI,CAAE,CAEhC,CACH,EACA,OAAOE,EAAS,CACd,IAAMR,EAAQS,EAAUF,EAAI,CAAC,EAC7BC,EAAQR,CAAK,EACbM,EAAI,CACF,GAAGN,EACH,eAAgB,KAAK,IAAI,CAC3B,CAAC,CACH,CACF,EAEJ,CACF,CACF","names":["create","combine","persist","deepClone","obj","ensure","keys","k","createPersistStore","state","methods","persistOptions","create","persist","combine","set","get","updater","deepClone","createStore"]}